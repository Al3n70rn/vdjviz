# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                    controllers.Application.index()
GET         /contacts                            controllers.Application.contacts()
GET         /about                               controllers.Application.about()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                        controllers.Assets.at(path="/public", file)



# Account routes
GET         /account                             controllers.AccountPage.index()
GET         /account/                            controllers.AccountPage.index()
GET         /account/:fileName/                  controllers.AccountPage.fileInformation(fileName: String)
GET         /account/newFile                     controllers.AccountPage.newFile()
GET         /account/:fileName/update            controllers.AccountPage.fileUpdatePage(fileName: String)
POST        /account/:fileName/update            controllers.AccountPage.fileUpdate(fileName: String)
POST        /account/newFile                     controllers.AccountPage.saveNewFile()
GET         /account/:fileName/delete            controllers.AccountPage.deleteFile(fileName: String)
GET         /account/allFiles                    controllers.AccountPage.getAccountAllFilesInformation()

#Computation
GET         /account/:fileName/table             controllers.Computation.returnVdjUsageData(fileName: String)
GET         /account/:fileName/histogram         controllers.Computation.returnSpectrotypeHistogram(fileName: String)
GET         /account/:fileName/histogramV        controllers.Computation.returnSpectrotypeVHistogram(fileName: String)
GET         /account/:fileName/annotation        controllers.Computation.returnAnnotationData(fileName: String)
GET         /account/getBasicStats               controllers.Computation.returnBasicStats()
GET         /account/basicStats                  controllers.AccountPage.basicStats()
GET         /account/getDiversity                controllers.Computation.returnDiversity()
GET         /account/diversity                   controllers.AccountPage.diversityPage()
GET         /account/:fileName/render            controllers.Computation.computationProgressBar(fileName: String)
GET         /account/:fileName/progress          controllers.Computation.computationPage(fileName: String)
GET         /account/deleteAll                   controllers.AccountPage.deleteAll()
POST        /account/asyncUpload                 controllers.AccountPage.asyncUploadFiles()

# Auth routes
GET         /signin                              securesocial.controllers.LoginPage.login
GET         /logout                              securesocial.controllers.LoginPage.logout
GET         /authenticate/:provider              securesocial.controllers.ProviderController.authenticate(provider)
POST        /authenticate/:provider              securesocial.controllers.ProviderController.authenticateByPost(provider)
GET         /signup                              securesocial.controllers.Registration.startSignUp
POST        /signup                              securesocial.controllers.Registration.handleStartSignUp
GET         /signup/:token                       securesocial.controllers.Registration.signUp(token)
POST        /signup/:token                       securesocial.controllers.Registration.handleSignUp(token)
GET         /password                            securesocial.controllers.PasswordChange.page
POST        /password                            securesocial.controllers.PasswordChange.handlePasswordChange
GET         /reset                               securesocial.controllers.Registration.startResetPassword
POST        /reset                               securesocial.controllers.Registration.handleStartResetPassword
GET         /reset/:token                        securesocial.controllers.Registration.resetPassword(token)
POST        /reset/:token                        securesocial.controllers.Registration.handleResetPassword(token)
